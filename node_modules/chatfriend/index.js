var mkdirp=require('mkdirp'),fs=require('fs');

var updateKey=function(db,key,callback){
			db.collection("keys").update({name:key.name},{$set:{taken:true}},{},function(a,b,c){
				callback();
			});
};

module.exports.newConvo=function(db,users,callback=function(c){
	console.log(c);
}){
		console.log(users);
		for(var yu=0;yu<users.length;yu++){
			console.log(users[yu]);
		};
		db.collection("keys").findOne({taken:false},function(err,key){
			
			updateKey(db,key,function(){
				var acc=[];
			for(var u=0;u<users.length;u++){
				var bluh={userkey:users[u].key, nickname:users[u].name};
				db.collection("users").update({key:users[u].key},{$push:{convos:key.name}},{upsert:true});
				acc.push(bluh);
			}
			var convo={
				name: "New Chat",
				key:key.name,
				accounts:acc,
				messages:[]
			}
			db.collection("convo").insertOne(convo);
			callback(convo);
			return(convo);
			});
		});
	};

module.exports.generateKeys=function(db,q){
	for(var j=0;j<q;j++){
		module.exports.generateOneKey(db);
	}
}

module.exports.newUser=function(db,name,passwd,callback=function(u){
	console.log("cdefault allback");
	console.log(u);
}){
	db.collection("keys").findOne({taken:false},function(err,key){
		updateKey(db,key,function(){
			var u={
				name: name,
				password:passwd,
				key:key.name,
				convos:[],
				boonk:0,
				myColor:"#dd92e5",
				yourColor:"#6f90a5"
		};
		db.collection("users").insertOne(u);
		fs.mkdir(__dirname+"/../../public/keys/"+key.name);
		callback(u);
		return(u);
		});
		});
};

module.exports.targetClient=function(socket,clients,callback){
	for(var b=0;b<clients.length;b++){
  		if(socket.id==clients[b].id){
  			callback(clients[b]);
  		}
  	}
}

module.exports.sendConvo=function(db,data,socket,clients){
	db.collection("convo").findOne({key:data.convo},{},function(err,out){
				module.exports.targetClient(socket,clients,function(boi){
					boi.emit("joinConvoRes",out);
				});
			});
}

module.exports.generateOneKey=function(db){
	var chars="abcdefghijklmnopqrstuvwxyz1234567890";
	var keyid="";
	for(var k=0;k<8;k++){
		keyid=keyid+chars[Math.floor(chars.length*Math.random())];
	}
	console.log(keyid);
	db.collection("keys").find({name:keyid}).toArray(function(err,out){

			console.log("key id] id before if is "+keyid);
			if(out.length>0){
				module.exports.generateOneKey(db);
			}else{
				db.collection("keys").insertOne({name:keyid,taken:false});
				console.log("key id is "+keyid);
			}
	});
}